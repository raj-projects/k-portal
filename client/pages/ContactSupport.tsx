import { useState } from 'react';
import { Phone, MessageCircle, Mail, MapPin, Clock, AlertTriangle, CheckCircle, Send, User, FileText, Headphones, Bot, Globe, Star } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import ChatBot from '@/components/ChatBot';

const ContactSupport = () => {
  const [language, setLanguage] = useState('hi');
  const [selectedCategory, setSelectedCategory] = useState('general');
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    email: '',
    category: 'general',
    priority: 'medium',
    message: ''
  });
  const [isChatBotOpen, setIsChatBotOpen] = useState(false);

  const content = {
    hi: {
      title: 'рд╕рдВрдкрд░реНрдХ рдФрд░ рд╕рд╣рд╛рдпрддрд╛',
      subtitle: '24x7 рдХрд┐рд╕рд╛рди рд╣реЗрд▓реНрдкрд▓я┐╜я┐╜рдЗрди рдФрд░ рддреБрд░рдВрдд рд╕рдорд╛рдзрд╛рди',
      emergencyHelp: 'рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛',
      generalSupport: 'рд╕рд╛рдорд╛рдиреНрдп рд╕рд╣рд╛рдпрддрд╛',
      technicalSupport: 'рддрдХрдиреАрдХреА рд╕рд╣рд╛рдпрддрд╛',
      feedback: 'рд╕реБрдЭрд╛рд╡ рдФрд░ рд╢рд┐рдХрд╛рдпрдд',
      chatBot: 'AI рдЪреИрдЯрдмреЙрдЯ',
      whatsappSupport: 'рд╡реНрд╣рд╛рдЯреНрд╕рдРрдк рд╕рд╣рд╛рдпрддрд╛',
      callSupport: 'рдлреЛрди рд╕рд╣рд╛рдпрддрд╛',
      emailSupport: 'рдИрдореЗрд▓ рд╕рд╣рд╛рдпрддрд╛',
      contactForm: 'рд╕рдВрдкрд░реНрдХ рдлреЙрд░реНрдо',
      name: 'рдирд╛рдо',
      phone: 'рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░',
      email: 'рдИрдореЗрд▓',
      category: 'рд╢реНрд░реЗрдгреА',
      priority: 'рдкреНрд░рд╛рдердорд┐рдХрддрд╛',
      message: 'рд╕рдВрджреЗрд╢',
      submit: 'рднреЗрдЬреЗрдВ',
      officeHours: 'рдХрд╛рд░реНрдпрд╛рд▓рдп рд╕рдордп',
      responseTime: 'рдЬрд╡рд╛рдм рдХрд╛ рд╕рдордп',
      helplineNumbers: 'рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рдирдВрдмрд░',
      regionalOffices: 'рдХреНрд╖реЗрддреНрд░реАрдп рдХрд╛рд░реНрдпрд╛рд▓рдп',
      faq: 'рдЕрдХрд╕рд░ рдкреВрдЫреЗ рдЬрд╛рдиреЗ рд╡рд╛рд▓реЗ рдкреНрд░рд╢реНрди',
      downloadApp: 'рдРрдк рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ'
    },
    en: {
      title: 'Contact & Support',
      subtitle: '24x7 Farmer Helpline and Instant Solutions',
      emergencyHelp: 'Emergency Help',
      generalSupport: 'General Support',
      technicalSupport: 'Technical Support',
      feedback: 'Feedback & Complaints',
      chatBot: 'AI ChatBot',
      whatsappSupport: 'WhatsApp Support',
      callSupport: 'Phone Support',
      emailSupport: 'Email Support',
      contactForm: 'Contact Form',
      name: 'Name',
      phone: 'Mobile Number',
      email: 'Email',
      category: 'Category',
      priority: 'Priority',
      message: 'Message',
      submit: 'Submit',
      officeHours: 'Office Hours',
      responseTime: 'Response Time',
      helplineNumbers: 'Helpline Numbers',
      regionalOffices: 'Regional Offices',
      faq: 'Frequently Asked Questions',
      downloadApp: 'Download App'
    }
  };

  const helplineNumbers = [
    {
      title: { hi: 'ЁЯЖШ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдХрд┐рд╕рд╛рди рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди', en: 'ЁЯЖШ Emergency Farmer Helpline' },
      number: '1800-180-1551',
      description: { hi: 'рдлрд╕рд▓, рдореМрд╕рдо рдпрд╛ рдХреАрдЯ рд╕рдВрдмрдВрдзреА рдЖрдкрд╛рддрдХрд╛рд▓', en: 'Crop, weather or pest emergencies' },
      availability: '24x7',
      type: 'emergency'
    },
    {
      title: { hi: 'ЁЯМ╛ рдлрд╕рд▓ рд╕рд▓рд╛рд╣ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди', en: 'ЁЯМ╛ Crop Advisory Helpline' },
      number: '1800-180-1552',
      description: { hi: 'рдмреБрдЖрдИ, рдХрдЯрд╛рдИ рдФрд░ рдлрд╕рд▓ рдХреА рджреЗрдЦрднрд╛рд▓', en: 'Sowing, harvesting and crop care' },
      availability: '6 AM - 10 PM',
      type: 'advisory'
    },
    {
      title: { hi: 'ЁЯТ░ рд╡рд┐рддреНрддреАрдп рд╕рд╣рд╛рдпрддрд╛ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди', en: 'ЁЯТ░ Financial Aid Helpline' },
      number: '1800-180-1553',
      description: { hi: 'рдЛрдг, рдмреАрдорд╛ рдФрд░ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ', en: 'Loans, insurance and government schemes' },
      availability: '9 AM - 6 PM',
      type: 'financial'
    },
    {
      title: { hi: 'ЁЯЫТ рдордВрдбреА рднрд╛рд╡ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди', en: 'ЁЯЫТ Market Prices Helpline' },
      number: '1800-180-1554',
      description: { hi: 'рдлрд╕рд▓ рдХреА рдХреАрдордд рдФрд░ рдмрд╛рдЬрд╛рд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА', en: 'Crop prices and market information' },
      availability: '5 AM - 8 PM',
      type: 'market'
    },
    {
      title: { hi: 'тЪЩя╕П рддрдХрдиреАрдХреА рд╕рд╣рд╛рдпрддрд╛', en: 'тЪЩя╕П Technical Support' },
      number: '1800-180-1555',
      description: { hi: 'рдРрдк рдФрд░ рд╡реЗрдмрд╕рд╛рдЗрдЯ рд╕рдВрдмрдВрдзреА рд╕рдорд╕реНрдпрд╛рдПрдВ', en: 'App and website related issues' },
      availability: '9 AM - 9 PM',
      type: 'technical'
    }
  ];

  const supportChannels = [
    {
      icon: MessageCircle,
      title: { hi: 'рд╡реНрд╣рд╛рдЯреНрд╕рдРрдк рд╕рд╣рд╛рдпрддрд╛', en: 'WhatsApp Support' },
      description: { hi: 'рддреБрд░рдВрдд рдЬрд╡рд╛рдм рдФрд░ рдлреЛрдЯреЛ рд╢реЗрдпрд░ рдХрд░реЗрдВ', en: 'Instant replies and photo sharing' },
      contact: '+91-9876543210',
      action: { hi: 'рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ', en: 'Send Message' },
      responseTime: { hi: '5 рдорд┐рдирдЯ', en: '5 minutes' },
      color: 'bg-green-500'
    },
    {
      icon: Phone,
      title: { hi: 'рдлреЛрди рд╕рд╣рд╛рдпрддрд╛', en: 'Phone Support' },
      description: { hi: 'рд╡рд┐рд╢реЗрд╖рдЬреНрдЮреЛрдВ рд╕реЗ рд╕реАрдзреА рдмрд╛рдд', en: 'Direct talk with experts' },
      contact: '1800-180-1551',
      action: { hi: 'рдХреЙрд▓ рдХрд░реЗрдВ', en: 'Call Now' },
      responseTime: { hi: 'рддреБрд░рдВрдд', en: 'Immediate' },
      color: 'bg-blue-500'
    },
    {
      icon: Mail,
      title: { hi: 'рдИрдореЗрд▓ рд╕рд╣рд╛рдпрддрд╛', en: 'Email Support' },
      description: { hi: 'рд╡рд┐рд╕реНрддреГрдд рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рдорд╛рдзрд╛рди', en: 'Detailed problem solutions' },
      contact: 'help@kisanmitra.in',
      action: { hi: 'рдИрдореЗрд▓ рднреЗрдЬреЗрдВ', en: 'Send Email' },
      responseTime: { hi: '2 рдШрдВрдЯреЗ', en: '2 hours' },
      color: 'bg-purple-500'
    },
    {
      icon: Bot,
      title: { hi: 'AI рдЪреИрдЯрдмреЙрдЯ', en: 'AI ChatBot' },
      description: { hi: 'рддреБрд░рдВрдд рдЬрд╡рд╛рдм рдкрд╛рдПрдВ', en: 'Get instant answers' },
      contact: 'рдХрд┐рд╕рд╛рдирдорд┐рддреНрд░ рдмреЙрдЯ',
      action: { hi: 'рдЪреИрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ', en: 'Start Chat' },
      responseTime: { hi: 'рддреБрд░рдВрдд', en: 'Instant' },
      color: 'bg-orange-500'
    }
  ];

  const regionalOffices = [
    {
      region: { hi: 'рдЙрддреНрддрд░ рднрд╛рд░рдд', en: 'North India' },
      states: { hi: 'рджрд┐рд▓реНрд▓реА, рдкрдВрдЬрд╛рдм, рд╣рд░рд┐рдпрд╛рдгрд╛, рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢', en: 'Delhi, Punjab, Haryana, Uttar Pradesh' },
      address: { hi: 'рд╕реЗрдХреНрдЯрд░ 18, рдиреЛрдПрдбрд╛, рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢ - 201301', en: 'Sector 18, Noida, Uttar Pradesh - 201301' },
      phone: '+91-120-4567890',
      email: 'north@kisanmitra.in',
      timing: '9 AM - 6 PM'
    },
    {
      region: { hi: 'рдкрд╢реНрдЪрд┐рдо рднрд╛рд░рдд', en: 'West India' },
      states: { hi: 'рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░, рдЧреБрдЬрд░рд╛рдд, рд░рд╛рдЬрд╕реНрдерд╛рди, рдордзреНрдп рдкреНрд░рджреЗрд╢', en: 'Maharashtra, Gujarat, Rajasthan, Madhya Pradesh' },
      address: { hi: 'рдмрд╛рдВрджреНрд░рд╛ рдХреБрд░реНрд▓рд╛ рдХреЙрдореНрдкреНрд▓реЗрдХреНрд╕, рдореБрдВрдмрдИ - 400051', en: 'Bandra Kurla Complex, Mumbai - 400051' },
      phone: '+91-22-4567890',
      email: 'west@kisanmitra.in',
      timing: '9 AM - 6 PM'
    },
    {
      region: { hi: 'рджрдХреНрд╖рд┐рдг рднрд╛рд░рдд', en: 'South India' },
      states: { hi: 'рдХрд░реНрдирд╛рдЯрдХ, рддрдорд┐рд▓рдирд╛рдбреБ, рдЖрдВрдзреНрд░ рдкреНрд░рджреЗрд╢, рддреЗрд▓рдВрдЧрд╛рдирд╛', en: 'Karnataka, Tamil Nadu, Andhra Pradesh, Telangana' },
      address: { hi: 'рдЗрд▓реЗрдХреНрдЯреНрд░реЙрдирд┐рдХ рд╕рд┐рдЯреА, рдмреИрдВрдЧрд▓реЛрд░ - 560100', en: 'Electronic City, Bangalore - 560100' },
      phone: '+91-80-4567890',
      email: 'south@kisanmitra.in',
      timing: '9 AM - 6 PM'
    },
    {
      region: { hi: 'рдкреВрд░реНрд╡ рднрд╛рд░рдд', en: 'East India' },
      states: { hi: 'рдкрд╢реНрдЪрд┐рдо рдмрдВрдЧрд╛рд▓, рдмрд┐рд╣рд╛рд░, рдЭрд╛рд░рдЦрдВрдб, рдУрдбрд┐рд╢рд╛', en: 'West Bengal, Bihar, Jharkhand, Odisha' },
      address: { hi: 'рд╕реЙрд▓реНрдЯ рд▓реЗрдХ рд╕рд┐рдЯреА, рдХреЛрд▓рдХрд╛рддрд╛ - 700091', en: 'Salt Lake City, Kolkata - 700091' },
      phone: '+91-33-4567890',
      email: 'east@kisanmitra.in',
      timing: '9 AM - 6 PM'
    }
  ];

  const faqData = [
    {
      question: { 
        hi: 'рдХрд┐рд╕рд╛рдирдорд┐рддреНрд░ рдХреА рд╕реЗрд╡рд╛рдПрдВ рдореБрдлреНрдд рд╣реИрдВ?', 
        en: 'Are KisanMitra services free?' 
      },
      answer: { 
        hi: 'рд╣рд╛рдВ, рдХрд┐рд╕рд╛рдирдорд┐рддреНрд░ рдХреА рд╕рднреА рдмреБрдирд┐рдпрд╛рджреА рд╕реЗрд╡рд╛рдПрдВ рдмрд┐рд▓реНрдХреБрд▓ рдореБрдлреНрдд рд╣реИрдВред рдореМрд╕рдо, рдордВрдбреА рднрд╛рд╡, рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ рдФрд░ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕рд▓рд╛рд╣ рд╕рднреА рдирд┐рдГрд╢реБрд▓реНрдХ рдЙрдкрд▓рдмреНрдз рд╣реИрдВред',
        en: 'Yes, all basic KisanMitra services are completely free. Weather, market prices, government schemes and expert advice are all available free of cost.'
      }
    },
    {
      question: { 
        hi: 'рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рдХрд┐рддрдиреЗ рдмрдЬреЗ рдЙрдкрд▓рдмреНрдз рд╣реИ?', 
        en: 'What are the helpline hours?' 
      },
      answer: { 
        hi: 'рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди 24x7 рдЙрдкрд▓рдмреНрдз рд╣реИред рдЕрдиреНрдп рд╕реЗрд╡рд╛рдУрдВ рдХреЗ рд▓рд┐рдП рд╕рдордп рд╕реБрдмрд╣ 6 рдмрдЬреЗ рд╕реЗ рд░рд╛рдд 10 рдмрдЬреЗ рддрдХ рд╣реИред',
        en: 'Emergency helpline is available 24x7. For other services, timing is from 6 AM to 10 PM.'
      }
    },
    {
      question: { 
        hi: 'рдХреНя┐╜я┐╜рд╛ рдореИрдВ рдЕрдкрдиреА рдХреНрд╖реЗрддреНрд░реАрдп рднрд╛рд╖рд╛ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗ рд╕рдХрддрд╛ рд╣реВрдВ?', 
        en: 'Can I get support in my regional language?' 
      },
      answer: { 
        hi: 'рд╣рд╛рдВ, рд╣рдо рд╣рд┐рдВрджреА, рдЕрдВрдЧреНрд░реЗрдЬреА рдФрд░ 15+ рдХреНрд╖реЗрддреНрд░реАрдп рднрд╛рд╖рд╛рдУрдВ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВред рд╡реНрд╣рд╛рдЯреНрд╕рдРрдк рдФрд░ рдлреЛрди рдкрд░ рд╕реНрдерд╛рдиреАрдп рднрд╛рд╖рд╛ рдореЗрдВ рдмрд╛рдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред',
        en: 'Yes, we provide support in Hindi, English and 15+ regional languages. You can communicate in local language on WhatsApp and phone.'
      }
    },
    {
      question: { 
        hi: 'рдореЗрд░реА рд╢рд┐рдХрд╛рдпрдд рдХрд╛ рдЬрд╡рд╛рдм рдХрд┐рддрдиреЗ рд╕рдордп рдореЗрдВ рдорд┐рд▓реЗрдЧрд╛?', 
        en: 'How long will it take to get response to my complaint?' 
      },
      answer: { 
        hi: 'рд╡реНрд╣рд╛рдЯреНрд╕рдРрдк рдкрд░ 5 рдорд┐рдирдЯ, рдлреЛрди рдкрд░ рддреБрд░рдВрдд, рдФрд░ рдИрдореЗрд▓ рдкрд░ 2 рдШрдВрдЯреЗ рдХреЗ рдЕрдВрджрд░ рдЬрд╡рд╛рдм рдорд┐рд▓реЗрдЧрд╛ред рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдорд╛рдорд▓реЛрдВ рдореЗрдВ рддреБрд░рдВрдд рд╕рд╣рд╛рдпрддрд╛ рдорд┐рд▓рддреА рд╣реИред',
        en: 'WhatsApp - 5 minutes, Phone - immediate, Email - within 2 hours. Emergency cases get immediate assistance.'
      }
    }
  ];

  const categories = [
    { key: 'general', label: { hi: 'рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╢реНрди', en: 'General Query' } },
    { key: 'technical', label: { hi: 'рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛', en: 'Technical Issue' } },
    { key: 'financial', label: { hi: 'рд╡рд┐рддреНрддреАрдп рд╕рд╣рд╛рдпрддрд╛', en: 'Financial Help' } },
    { key: 'crop', label: { hi: 'рдлрд╕рд▓ рд╕рд▓рд╛рд╣', en: 'Crop Advice' } },
    { key: 'complaint', label: { hi: 'рд╢рд┐рдХрд╛рдпрдд', en: 'Complaint' } }
  ];

  const priorities = [
    { key: 'low', label: { hi: 'рдХрдо', en: 'Low' } },
    { key: 'medium', label: { hi: 'рдордзреНрдпрдо', en: 'Medium' } },
    { key: 'high', label: { hi: 'рдЙрдЪреНрдЪ', en: 'High' } },
    { key: 'urgent', label: { hi: 'рдЕрддреНрдпрдзрд┐рдХ рдЬрд░реВрд░реА', en: 'Urgent' } }
  ];

  const handleFormSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Handle form submission
    alert(language === 'hi' ? 'рдЖрдкрдХрд╛ рд╕рдВрджреЗрд╢ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред рдЬрд▓реНрдж рд╣реА рдЬрд╡рд╛рдм рдорд┐рд▓реЗрдЧрд╛ред' : 'Your message has been sent. You will get a response soon.');
    setFormData({
      name: '',
      phone: '',
      email: '',
      category: 'general',
      priority: 'medium',
      message: ''
    });
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const getHelplineTypeColor = (type: string) => {
    switch (type) {
      case 'emergency': return 'border-red-400 bg-red-50';
      case 'advisory': return 'border-green-400 bg-green-50';
      case 'financial': return 'border-blue-400 bg-blue-50';
      case 'market': return 'border-yellow-400 bg-yellow-50';
      case 'technical': return 'border-purple-400 bg-purple-50';
      default: return 'border-gray-400 bg-gray-50';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-green-50 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-bold text-farm-700 mb-4">
            {content[language as keyof typeof content].title}
          </h1>
          <p className="text-lg text-farm-600 max-w-3xl mx-auto">
            {content[language as keyof typeof content].subtitle}
          </p>
        </div>

        {/* Emergency Alert */}
        <div className="mb-8">
          <Alert className="border-red-400 bg-red-50">
            <AlertTriangle className="h-6 w-6 text-red-600" />
            <AlertDescription>
              <div className="flex flex-col md:flex-row md:justify-between md:items-center">
                <div>
                  <p className="font-bold text-red-800 text-lg mb-2">
                    ЁЯЪи {language === 'hi' ? 'рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛ - 24x7 рдЙрдкрд▓рдмреНрдз' : 'Emergency Help - Available 24x7'}
                  </p>
                  <p className="text-red-700">
                    {language === 'hi' 
                      ? 'рдлрд╕рд▓, рдореМрд╕рдо рдпрд╛ рдХреАрдЯ рд╕рдВрдмрдВрдзреА рдЖрдкрд╛рддрдХрд╛рд▓ рдореЗрдВ рддреБрд░рдВрдд рдХреЙрд▓ рдХрд░реЗрдВред рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рддреБрд░рдВрдд рд╕рд╣рд╛рдпрддрд╛ рдХрд░реЗрдВрдЧреЗред'
                      : 'Call immediately for crop, weather or pest emergencies. Experts will provide immediate assistance.'
                    }
                  </p>
                </div>
                <div className="mt-4 md:mt-0 text-center">
                  <Button size="lg" className="bg-red-600 hover:bg-red-700 text-white font-bold px-8 py-4">
                    ЁЯУЮ 1800-180-1551
                  </Button>
                  <p className="text-xs text-red-600 mt-1">
                    {language === 'hi' ? 'рдирд┐рдГрд╢реБрд▓реНрдХ рдХреЙрд▓' : 'Toll Free'}
                  </p>
                </div>
              </div>
            </AlertDescription>
          </Alert>
        </div>

        {/* Support Channels */}
        <div className="mb-12">
          <h2 className="text-2xl font-bold text-farm-700 mb-6 text-center">
            {language === 'hi' ? 'рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рддрд░реАрдХреЗ' : 'Support Channels'}
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {supportChannels.map((channel, index) => (
              <Card key={index} className="border-farm-200 hover:shadow-lg transition-all duration-300 text-center">
                <CardContent className="p-6">
                  <div className={`${channel.color} w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4`}>
                    <channel.icon className="h-8 w-8 text-white" />
                  </div>
                  <h3 className="text-lg font-bold text-farm-700 mb-2">
                    {channel.title[language as keyof typeof channel.title]}
                  </h3>
                  <p className="text-sm text-farm-600 mb-3">
                    {channel.description[language as keyof typeof channel.description]}
                  </p>
                  <p className="font-semibold text-farm-700 mb-3">{channel.contact}</p>
                  <div className="flex items-center justify-center text-xs text-gray-500 mb-4">
                    <Clock className="h-3 w-3 mr-1" />
                    {channel.responseTime[language as keyof typeof channel.responseTime]}
                  </div>
                  <Button 
                    className="w-full"
                    onClick={() => {
                      if (channel.title.en === 'AI ChatBot') {
                        setIsChatBotOpen(true);
                      } else if (channel.title.en === 'WhatsApp Support') {
                        window.open(`https://wa.me/919876543210`, '_blank');
                      } else if (channel.title.en === 'Phone Support') {
                        window.open(`tel:18001801551`, '_blank');
                      } else {
                        window.open(`mailto:${channel.contact}`, '_blank');
                      }
                    }}
                  >
                    {channel.action[language as keyof typeof channel.action]}
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Helpline Numbers */}
        <div className="mb-12">
          <h2 className="text-2xl font-bold text-farm-700 mb-6 text-center">
            {content[language as keyof typeof content].helplineNumbers}
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {helplineNumbers.map((helpline, index) => (
              <Card key={index} className={`${getHelplineTypeColor(helpline.type)} border-2 hover:shadow-lg transition-all duration-300`}>
                <CardContent className="p-6">
                  <h3 className="text-lg font-bold text-farm-700 mb-3">
                    {helpline.title[language as keyof typeof helpline.title]}
                  </h3>
                  <div className="bg-white p-4 rounded-lg mb-4 text-center">
                    <p className="text-2xl font-bold text-farm-700">{helpline.number}</p>
                  </div>
                  <p className="text-sm text-farm-600 mb-3">
                    {helpline.description[language as keyof typeof helpline.description]}
                  </p>
                  <div className="flex items-center justify-between text-xs">
                    <span className="flex items-center text-farm-700">
                      <Clock className="h-3 w-3 mr-1" />
                      {helpline.availability}
                    </span>
                    <Button size="sm" onClick={() => window.open(`tel:${helpline.number.replace(/\D/g, '')}`, '_blank')}>
                      <Phone className="h-4 w-4 mr-1" />
                      {language === 'hi' ? 'рдХреЙрд▓ рдХрд░реЗрдВ' : 'Call'}
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
          {/* Contact Form */}
          <Card className="border-farm-200">
            <CardHeader>
              <CardTitle className="flex items-center text-2xl text-farm-700">
                <Send className="mr-3 h-6 w-6" />
                {content[language as keyof typeof content].contactForm}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleFormSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-semibold text-farm-700 mb-2">
                    {content[language as keyof typeof content].name} *
                  </label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    required
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-farm-500 focus:border-transparent"
                    placeholder={language === 'hi' ? 'рдЖрдкрдХрд╛ рдирд╛рдо' : 'Your name'}
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-semibold text-farm-700 mb-2">
                    {content[language as keyof typeof content].phone} *
                  </label>
                  <input
                    type="tel"
                    name="phone"
                    value={formData.phone}
                    onChange={handleInputChange}
                    required
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-farm-500 focus:border-transparent"
                    placeholder={language === 'hi' ? '+91 98765 43210' : '+91 98765 43210'}
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-semibold text-farm-700 mb-2">
                    {content[language as keyof typeof content].email}
                  </label>
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-farm-500 focus:border-transparent"
                    placeholder={language === 'hi' ? 'рдЖрдкрдХрд╛ рдИрдореЗрд▓' : 'Your email'}
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-semibold text-farm-700 mb-2">
                      {content[language as keyof typeof content].category}
                    </label>
                    <select
                      name="category"
                      value={formData.category}
                      onChange={handleInputChange}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-farm-500 focus:border-transparent"
                    >
                      {categories.map((cat) => (
                        <option key={cat.key} value={cat.key}>
                          {cat.label[language as keyof typeof cat.label]}
                        </option>
                      ))}
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-farm-700 mb-2">
                      {content[language as keyof typeof content].priority}
                    </label>
                    <select
                      name="priority"
                      value={formData.priority}
                      onChange={handleInputChange}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-farm-500 focus:border-transparent"
                    >
                      {priorities.map((priority) => (
                        <option key={priority.key} value={priority.key}>
                          {priority.label[language as keyof typeof priority.label]}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-semibold text-farm-700 mb-2">
                    {content[language as keyof typeof content].message} *
                  </label>
                  <textarea
                    name="message"
                    value={formData.message}
                    onChange={handleInputChange}
                    required
                    rows={4}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-farm-500 focus:border-transparent"
                    placeholder={language === 'hi' ? 'рдЕрдкрдиреА рд╕рдорд╕реНрдпрд╛ рдпрд╛ рд╕рд╡рд╛рд▓ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд▓рд┐рдЦреЗрдВ...' : 'Write your problem or question in detail...'}
                  />
                </div>
                
                <Button type="submit" className="w-full bg-farm-500 hover:bg-farm-600 text-white py-3">
                  <Send className="h-5 w-5 mr-2" />
                  {content[language as keyof typeof content].submit}
                </Button>
              </form>
            </CardContent>
          </Card>

          {/* FAQ Section */}
          <Card className="border-farm-200">
            <CardHeader>
              <CardTitle className="flex items-center text-2xl text-farm-700">
                <FileText className="mr-3 h-6 w-6" />
                {content[language as keyof typeof content].faq}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {faqData.map((faq, index) => (
                  <div key={index} className="border-b border-gray-200 pb-4 last:border-b-0">
                    <h4 className="font-semibold text-farm-700 mb-2">
                      тЭУ {faq.question[language as keyof typeof faq.question]}
                    </h4>
                    <p className="text-sm text-farm-600">
                      {faq.answer[language as keyof typeof faq.answer]}
                    </p>
                  </div>
                ))}
              </div>
              
              <div className="mt-6 p-4 bg-farm-50 rounded-lg">
                <p className="text-sm text-farm-700 font-medium mb-2">
                  ЁЯТб {language === 'hi' ? 'рдФрд░ рд╕рд╡рд╛рд▓ рд╣реИрдВ?' : 'More questions?'}
                </p>
                <p className="text-sm text-farm-600">
                  {language === 'hi' 
                    ? 'рд╣рдорд╛рд░реЗ AI рдЪреИрдЯрдмреЙрдЯ рд╕реЗ рддреБрд░рдВрдд рдЬрд╡рд╛рдм рдкрд╛рдПрдВ рдпрд╛ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВред'
                    : 'Get instant answers from our AI chatbot or call the helpline.'
                  }
                </p>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Regional Offices */}
        <div className="mb-12">
          <h2 className="text-2xl font-bold text-farm-700 mb-6 text-center">
            {content[language as keyof typeof content].regionalOffices}
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {regionalOffices.map((office, index) => (
              <Card key={index} className="border-farm-200 hover:shadow-lg transition-all duration-300">
                <CardContent className="p-6">
                  <h3 className="text-xl font-bold text-farm-700 mb-2">
                    ЁЯУН {office.region[language as keyof typeof office.region]}
                  </h3>
                  <p className="text-sm text-farm-600 mb-4">
                    {office.states[language as keyof typeof office.states]}
                  </p>
                  <div className="space-y-3 text-sm">
                    <div className="flex items-start">
                      <MapPin className="h-4 w-4 text-farm-600 mr-2 mt-0.5" />
                      <span>{office.address[language as keyof typeof office.address]}</span>
                    </div>
                    <div className="flex items-center">
                      <Phone className="h-4 w-4 text-farm-600 mr-2" />
                      <span>{office.phone}</span>
                    </div>
                    <div className="flex items-center">
                      <Mail className="h-4 w-4 text-farm-600 mr-2" />
                      <span>{office.email}</span>
                    </div>
                    <div className="flex items-center">
                      <Clock className="h-4 w-4 text-farm-600 mr-2" />
                      <span>{office.timing}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Success Story */}
        <div className="mb-8">
          <Alert className="border-green-200 bg-green-50">
            <CheckCircle className="h-5 w-5 text-green-600" />
            <AlertDescription>
              <div className="text-center">
                <p className="font-bold text-green-800 text-lg mb-2">
                  тнР {language === 'hi' ? '5 рдХрд░реЛрдбрд╝+ рдХрд┐рд╕рд╛рди рд╣рдорд╛рд░реА рд╕реЗрд╡рд╛рдУрдВ рд╕реЗ рд╕рдВрддреБрд╖реНрдЯ' : '5 Crore+ farmers satisfied with our services'}
                </p>
                <div className="flex justify-center items-center space-x-6 text-sm text-green-700">
                  <div className="flex items-center">
                    <Star className="h-4 w-4 text-yellow-500 mr-1" />
                    <span>4.9/5 {language === 'hi' ? 'рд░реЗрдЯрд┐рдВрдЧ' : 'Rating'}</span>
                  </div>
                  <div>99% {language === 'hi' ? 'я┐╜я┐╜я┐╜рдорд╕реНрдпрд╛ рд╕рдорд╛рдзрд╛рди рджрд░' : 'Problem Resolution Rate'}</div>
                  <div>{language === 'hi' ? '24x7 рдЙрдкрд▓рдмреНрдзрддрд╛' : '24x7 Availability'}</div>
                </div>
              </div>
            </AlertDescription>
          </Alert>
        </div>

        {/* ChatBot Component */}
        {isChatBotOpen && <ChatBot />}
      </div>
    </div>
  );
};

export default ContactSupport;
